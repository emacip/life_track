<html>
<head>


  <script src="https://cdn.socket.io/socket.io-1.3.4.js"></script>

  <script src="http://code.jquery.com/jquery-1.11.1.js"></script>






  <style>

      canvas {
          background:#000;
          cursor:crosshair;
      }

  </style>

</head>

<body>


<canvas id="demo" width=700 height=200></canvas><br>

<input type="button" onclick="killRevive();" value="show Data">
<input type="button" onclick="bufferOnGraph();" value="deploy graph">


<div id="logRate"></div>


<script type="text/javascript">



    var secPushValue = null;
    var pushValue = [];
    var pushCounter = 0;



    // Enable pusher logging - don't include this in production
    /*    Pusher.log = function(message) {
     if (window.console && window.console.log) {
     window.console.log(message);
     }
     };

     var pusher = new Pusher('4084cadee9c981969e6c');
     var channel = pusher.subscribe('life_tracking');
     channel.bind('update_life', function(data) {
     // alert(data.message);


     arrayValJson = JSON.parse(data.message);


     if ( pushCounter > 2000 ) { //avoid infinite buf size (secundary buffer)
     if ( secPushValue == null ) {
     secPushValue = [];
     }

     for ( hh = 0; hh < arrayValJson.length; hh++ ) {
     secPushValue.push(arrayValJson[hh]);
     }


     } else {


     for ( hh = 0; hh < arrayValJson.length; hh++ ) {
     pushValue.push(arrayValJson[hh]);

     }

     }


     }); */



    var socket = io('http://localhost:1234');
    socket.on('receive', function (data) {
        console.log(data);
        socket.emit('my other event', { my: 'data' });
    });


</script>


<script>




    var demoLive = false;
    var oldPY;

    var killValue = 0;
    var killNumRow = 0;


    function killRevive() {

        demoLive = !demoLive;

        if ( demoLive == true ) {
            oldPY = py;
        } else {
            py = oldPY;
        }

    }

    function bufferOnGraph() {

        var x = document.getElementById("demo");

        py = 21;


//var offsets = document.getElementById('demo').getBoundingClientRect();
//var top = offsets.top;

//alert(top);




    }



    var arrayHeart = [152, 151, 139, 95, 38, 38, 38, 38, 38, 38, 38, 38, 38, 48, 102, 142, 171, 187, 194, 197, 197, 197, 194, 178, 155, 122, 122, 103, 92, 84, 81, 80, 80, 81, 88, 98, 109, 115, 122, 125, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 114, 91, 71, 48, 37, 30, 28, 27, 27, 31, 47, 74, 111, 150, 164, 184, 191, 192, 193, 192, 178, 140, 90, 51, 51, 22, 6, 6, 6, 0, 16, 38, 68, 68, 89, 109, 116, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 120, 114, 101, 80, 63, 48, 38, 32, 31, 30, 30, 30, 30, 32, 48, 73, 104, 129, 129, 164, 173, 177, 178, 178, 178, 156, 113, 78, 52, 37, 27, 22, 21, 21, 24, 39, 63, 83, 104, 113, 119, 119, 121, 122, 122, 122, 122, 121, 121, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 119, 118, 110, 92, 63, 40, 23, 12, 8, 8, 8, 9, 20, 29, 58, 92, 115, 132, 144, 150, 153, 153, 153, 151, 136, 114, 84, 63, 52, 42, 42, 38, 38, 43, 59, 74, 94, 94, 107, 117, 122, 123, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 123, 116, 98, 66, 28, 15, 15, 15, 15, 15, 15, 6, 31, 66, 105, 129, 145, 155, 158, 159, 159, 159, 156, 142, 117, 83, 61, 48, 40, 36, 36, 36, 38, 47, 63, 81, 92, 101, 107, 109];


    var ctx = demo.getContext('2d'),
            w = demo.width,
            h = demo.height,
            px = 0, opx = 0, speed = 3,
            py = h * 0.8, opy = py,
            scanBarWidth = 20;

    var showValues = false;

    var indexHeart = 0;

    ctx.strokeStyle = '#00bd00';
    ctx.lineWidth = 3;

    demo.onmousemove = function(e) {

        if ( showValues ) {

            var r = demo.getBoundingClientRect();
            py = e.clientY - r.top;

        }

    }
    loop();

    function loop() {






        if ( pushCounter < pushValue.length ) {
            py = pushValue[pushCounter];
            pushCounter++;
        } else {
            // if ( !showValues ) {
//         py = 150;
            // }

        }



        if ( showValues == true ) {
            var elem = document.getElementById("logRate");
            elem.innerHTML += ', '+py;

        }


        // if ( pushCounter > 2000 ) {
        //   pushValue = secPushValue;
        //  pushCounter = 0;

        // }

        // if ( pushCounter == 250 ) {
        //    secPushValue = null;
        // }



        if ( demoLive ) {
            py = arrayHeart[indexHeart];
            indexHeart = indexHeart == arrayHeart.length ? 0 : indexHeart+1;
        }




        if ( py ==  killValue  ) {

            if (killNumRow < 50)
                killNumRow++;
        }else {
            killNumRow = 0;
            killValue = py;
            ctx.strokeStyle = '#00bd00';
        }

        if (killNumRow > 40) {
            ctx.strokeStyle = '#bd0000';
        }


        px += speed;

        ctx.clearRect(px,0, scanBarWidth, h);
        ctx.beginPath();
        ctx.moveTo(opx, opy);
        ctx.lineTo(px, py);
        ctx.stroke();

        opx = px;
        opy = py;

        if (opx > w) {
            px = opx = -speed;
        }

        requestAnimationFrame(loop);
    }

</script>


</body>



</html>
